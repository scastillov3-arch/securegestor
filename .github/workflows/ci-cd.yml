name: CI/CD - SecureGestor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Wait for Postgres to be ready
        run: |
          echo "Waiting for Postgres..."
          for i in $(seq 1 60); do
            pg_isready -h localhost -p 5432 && break || (echo "Retrying..."; sleep 2)
          done

      - name: Sync database (sequelize.sync)
        env:
          DB_HOST: localhost
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          node -e "require('./src/models').sequelize.sync().then(()=>console.log('DB synced')).catch(e=>{console.error(e); process.exit(1)})"

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: npm test

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true

      - name: Build Docker image
        run: docker build -t securegestor:latest .

      - name: Prepare .env for docker-compose deploy
        run: |
          cat > .env.ci <<EOF
          DB_HOST=postgres
          DB_PORT=5432
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PORT=3000
          NODE_ENV=production
          EOF
        shell: bash

      - name: Deploy to local staging (Docker Compose)
        run: |
          # use .env.ci as env file for docker-compose to avoid leaking secrets in logs
          mv .env.ci .env
          docker-compose down || true
          docker-compose up -d --build
          docker-compose ps
        shell: bash

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Build project for CodeQL
        run: npm ci

      - name: Analyze
        uses: github/codeql-action/analyze@v3
